pipeline {
  agent {
    docker {
      image 'keerthisan/maven_docker_agent:v1'
      args '--user 974:972 -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
      // This tells Docker to ignore the image ENTRYPOINT and run Jenkins commands directly.
    }
  }
  stages {
    stage('Checkout') {
      steps {
          // Jenkins automatically clones your repo into $WORKSPACE
          checkout scm
          sh 'echo "checkout completed at $WORKSPACE"'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.56.100:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube_cred', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && \
                mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
                  -Dsonar.token=$SONAR_AUTH_TOKEN \
                  -Dsonar.host.url=${SONAR_URL} \
                  -Dsonar.java.binaries=target/classes \
                  -Dsonar.coverage.exclusions=** \
                  -Dsonar.junit.reportPaths= \
                  -Dsonar.jacoco.reportPaths=
            '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "keerthisan/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker_cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker_cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins"
            GIT_USER_NAME = "learn-devops-demo"
        }
        steps {
           dir("${WORKSPACE}") {
              withCredentials([string(credentialsId: 'github_cred', variable: 'GITHUB_TOKEN')]) {
                 sh '''
                    git config user.email "keerthana61200@gmail.com"
                    git config user.name "Keerthana S"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                 '''
              }
           }
        }
    }
  }
}
